---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Chou.
--- DateTime: 2018/1/23 10:48
---

local ngx = ngx
local redis_i = require "resty/redis-util"
local redis = redis_i:new({
    host = "192.168.100.4",
    port = 6379,
    password = nil
})
local json = require("cjson.safe")
ngx.req.read_body()
local headers = ngx.req.get_headers()

local app_key = headers['app_key']
local sign = headers['sign']
local timestamp = headers['timestamp']

if app_key == nil then
    ngx.log(ngx.ERR, "app_key 值为nil:")
    return
end

if app_key == 'android' or app_key == 'apple' or app_key == 'wechat' or app_key == 'h5' or app_key == 'pc' then
    ngx.log(ngx.ERR, "app_key 属于旧版本app :" .. app_key)
    return
end

ngx.log(ngx.ERR, "新版app_key值:" .. app_key)

local body_data = ngx.req.get_body_data()

if body_data == nil then
    ngx.log(ngx.ERR, "body 数据 值为nil:")
    return
end

local res, err = redis:eval([[
    local app_key = redis.call("hget","APP_SIGN_HEADER",KEYS[1].."key")
    local app_version = redis.call("hget","APP_SIGN_HEADER",KEYS[1].."version")
    local key = redis.call("hget","APP_SIGN_DATA",app_key..app_version.."KEY")
    local res={}
    table.insert(res,app_key)
    table.insert(res,app_version)
    table.insert(res,key)
    return res
    ]], 1, app_key)

if not res then
    if err ~= nil and "connection refused" == err then
        ngx.log(ngx.ERR, "redis 服务器连接失败" .. err)
        return
    else
        ngx.log(ngx.ERR, "获取缓存秘钥失败" .. err)
        ngx.exit(ngx.HTTP_FORBIDDEN)
    end
end

local app_key_real = res[1]
local app_version_real = res[2]
local key_real = res[3]

local json_data = json.decode(body_data)
--添加客户端appKey
json_data['appKey'] = app_key_real
local param_key_list = {}
--获取key
for k in pairs(json_data) do
    table.insert(param_key_list, k)
end

--排序key
local function list_sort(a, b)
    local a_len = string.len(a)
    local b_len = string.len(b)
    local max_len = a_len
    if b_len > a_len then
        max_len = b_len
    end

    for i = 1, max_len do
        if string.len(a) < i then
            if a_len > b_len then
                return false
            else
                return true
            end
        end
        if string.len(b) < i then
            if a_len > b_len then
                return false
            else
                return true
            end
        end

        local a_byte = string.byte(a, i)
        local b_byte = string.byte(b, i)

        if a_byte == b_byte then

        end
        if a_byte > b_byte then
            return false
        end
        if a_byte < b_byte then
            return true
        end
    end
end

table.sort(param_key_list, list_sort)

local res_list = {}
for i, k in ipairs(param_key_list) do
    local value = json_data[k]
    if value == nil or type(value) == 'table' then
    else
        table.insert(res_list, k .. "=" .. value)
    end
end

table.insert(res_list, "timestamp" .. "=" .. timestamp)
table.insert(res_list, "key" .. "=" .. key_real)

local response = table.concat(res_list, "&")

ngx.log(ngx.ERR, "body 数据签名:" .. response)
ngx.log(ngx.ERR, "秘钥:" .. key_real .. "  appKey:" .. app_key_real .. "  version:" .. app_version_real)

local md5_res = ngx.md5(response)
ngx.log(ngx.ERR, "md5加密后参数:" .. md5_res)

if not sign or md5_res ~= sign then
    ngx.log(ngx.ERR, "md5加密后参数与前端加密参数不一致 结束请求")
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

ngx.req.set_header("app_key", app_key_real)
ngx.req.set_header("version", app_version_real)


